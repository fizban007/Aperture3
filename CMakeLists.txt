cmake_minimum_required(VERSION 2.8)
include(ExternalProject)
project (Aperture)
message ("CMAKE_BUILD_TYPE is ${CMAKE_BUILD_TYPE}")

option(build_tests "Build the test suite." OFF)

# Set CXX flags
# set(CMAKE_CXX_COMPILER "/opt/intel/bin/icpc")
set(CMAKE_CXX_STANDARD 14)
set(CXX_EXTRA_FLAGS "-DBOOST_ALL_NO_LIB=1 -DBOOST_NO_CXX14_CONSTEXPR")
# message(${CMAKE_CXX_COMPILER})
if (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
  set(CMAKE_CXX_FLAGS_RELEASE "-std=c++14 -pthread -O3 -g -DNDEBUG -Wall -Wextra -fPIC -xHost -no-prec-div ${CXX_EXTRA_FLAGS}")
else()
  # set(CXX_EXTRA_FLAGS "-Wno-misleading-indentation -Wno-unused-parameter")
  set(CXX_EXTRA_FLAGS "-Wno-unused-parameter")
  set(CMAKE_CXX_FLAGS_RELEASE "-std=c++14 -pthread -O3 -g -DNDEBUG -Wall -Wextra -fPIC -march=native ${CXX_EXTRA_FLAGS}")
endif()
set(CMAKE_CXX_FLAGS_DEBUG "-std=c++14 -pthread -g3 -O0 -Wall -Wextra -fPIC ${CXX_EXTRA_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_RELEASE}")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules")
# set(Project_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(HDF5_USE_STATIC_LIBRARIES)

find_package(MPI REQUIRED)
find_package(HDF5 REQUIRED COMPONENTS C CXX)
# find_package(Silo REQUIRED)
# set(Boost_USE_STATIC_LIBS ON)
find_package(Boost COMPONENTS system filesystem REQUIRED)
# find_package(GSL)
# find_package(Eigen3)
# if (EIGEN3_FOUND)
#   message(${EIGEN3_INCLUDE_DIR})
# endif()
# find_package(CUDA)

if (CUDA_FOUND)
  message(${CUDA_TOOLKIT_ROOT_DIR})
endif()
# find_package(OpenMP)
# if(OPENMP_FOUND)
#   message("OPENMP FOUND")
#   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
#   set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${OpenMP_CXX_FLAGS}")
#   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${OpenMP_CXX_FLAGS}")
#   set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
# endif()

set(GMOCK_INCLUDE_DIR deps/googletest/googlemock/include)
set(GTEST_INCLUDE_DIR deps/googletest/googletest/include)
set(FMT_INCLUDE_DIR deps/fmt)
set(CUDALE_INCLUDE_DIR deps/CudaLE/include)
set(JSON_INCLUDE_DIR deps/json/include)
set(CXX_OPTS_INCLUDE_DIR deps/cxxopts/include)
set(CPPTOML_INCLUDE_DIR deps/cpptoml/include)
set(VISIT_STRUCT_INCLUDE_DIR deps/visit_struct/include)
# set(CATCH_INCLUDE_DIR deps/single_include)
# set(INTEGRATE_INCLUDE_DIR deps/integrate/src)

include_directories(${GMOCK_INCLUDE_DIR} ${GTEST_INCLUDE_DIR} ${MPI_INCLUDE_PATH} ${EIGEN3_INCLUDE_DIR} ${FMT_INCLUDE_DIR} ${CUDALE_INCLUDE_DIR} ${JSON_INCLUDE_DIR} ${CXX_OPTS_INCLUDE_DIR} ${CPPTOML_INCLUDE_DIR} ${VISIT_STRUCT_INCLUDE_DIR} include)
  # ${CATCH_INCLUDE_DIR} ${INTEGRATE_INCLUDE_DIR}

add_subdirectory(deps/fmt)
add_subdirectory(src)
add_subdirectory(tests)
# add_subdirectory(tools)

if (build_tests)
  include(CTest)
  # Enable testing
  enable_testing(true)

  function(install)
  endfunction()
  add_subdirectory(deps/googletest)
  add_subdirectory(tests)
endif()

# This is to get all header files recognized by QtCreator
file(GLOB_RECURSE headers "include/*.h" "include/*/*.h" "include/*.hpp" "include/*/*.hpp")
add_custom_target(myIncludes SOURCES ${headers})
